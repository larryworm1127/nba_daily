# Generated by Django 2.2.3 on 2019-07-11 01:53

from django.db import migrations
from pandas import read_json


def load_data(apps, schema_editor):
    PlayerGameLog = apps.get_model('main', 'PlayerGameLog')
    TeamGameLog = apps.get_model('main', 'TeamGameLog')
    Game = apps.get_model('main', 'Game')
    Players = apps.get_model('main', 'Player')

    print("Migrate Individual Player Game Log Data.")

    game_log = read_json('main/data/2018-19/player_game_log.json', dtype={'GAME_ID': str})

    for _, data in game_log.iterrows():
        try:
            player_obj = Players.objects.get(player_id=data['PLAYER_ID'])
        except Players.DoesNotExist:
            continue

        order = get_player_order(player_obj, data['GAME_ID'])
        game = Game.objects.get(game_id=data['GAME_ID'])
        team_game_log = TeamGameLog.objects.get(game__game_id=data['GAME_ID'], matchup=data['MATCHUP'])
        PlayerGameLog(
            game=game,
            team_game_log=team_game_log,
            order=order,
            player=player_obj,
            plus_minus=data['PLUS_MINUS'],
            matchup=data['MATCHUP'],
            minutes=data['MIN'],
            points=data['PTS'],
            offense_reb=data['OREB'],
            defense_reb=data['DREB'],
            rebounds=data['REB'],
            assists=data['AST'],
            steals=data['STL'],
            blocks=data['BLK'],
            turnovers=data['TOV'],
            fouls=data['PF'],
            fg_made=data['FGM'],
            fg_attempt=data['FGA'],
            fg_percent=data['FG_PCT'],
            fg3_made=data['FG3M'],
            fg3_attempt=data['FG3A'],
            fg3_percent=data['FG3_PCT'],
            ft_made=data['FTM'],
            ft_attempt=data['FTA'],
            ft_percent=data['FT_PCT'],
            result=data['WL']
        ).save()


def get_player_order(player_obj, game_id):
    boxscore = read_json(f'main/data/2018-19/boxscore/{game_id}.json')
    player_team = boxscore[boxscore.PLAYER_ID == player_obj.player_id]['TEAM_ID'].values[0]
    opp_count = len(boxscore[boxscore.TEAM_ID != player_team])

    index = 0
    for item in boxscore.itertuples():
        if item.PLAYER_ID == player_obj.player_id:
            index = item.Index

    if index >= opp_count and boxscore['TEAM_ID'][0] != player_team:
        index -= opp_count

    return index


def undo(apps, schema_editor):
    PlayerGameLog = apps.get_model("main", "PlayerGameLog")
    PlayerGameLog.objects.all().delete()


class Migration(migrations.Migration):
    dependencies = [
        ('main', '0005_populate_team_game_log_data'),
    ]

    operations = [
        migrations.RunPython(load_data, undo)
    ]
